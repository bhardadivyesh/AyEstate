/**
 * Type containing all information regarding the customer.
 * @public
 */
export declare interface CustomerInfo {
    /**
     * Entitlements attached to this customer info.
     */
    readonly entitlements: EntitlementInfos;
    /**
     * Map of productIds to expiration dates.
     */
    readonly allExpirationDatesByProduct: {
        [productIdentifier: string]: Date | null;
    };
    /**
     * Map of productIds to purchase dates.
     */
    readonly allPurchaseDatesByProduct: {
        [productIdentifier: string]: Date | null;
    };
    /**
     * Set of active subscription product identifiers.
     */
    readonly activeSubscriptions: Set<string>;
    /**
     * URL to manage the active subscription of the user.
     * If this user has an active RC Billing subscription, a link to the management page.
     * If this user has an active iOS subscription, this will point to the App Store.
     * If the user has an active Play Store subscription it will point there.
     * If there are no active subscriptions it will be null.
     */
    readonly managementURL: string | null;
    /**
     * Date when this info was requested.
     */
    readonly requestDate: Date;
    /**
     * The date this user was first seen in RevenueCat.
     */
    readonly firstSeenDate: Date;
    /**
     * The purchase date for the version of the application when the user bought the app.
     * Use this for grandfathering users when migrating to subscriptions. This can be null.
     */
    readonly originalPurchaseDate: Date | null;
    /**
     * The original App User Id recorded for this user.
     */
    readonly originalAppUserId: string;
}

/**
 * This object gives you access to all the information about the status
 * of a user's entitlements.
 * @public
 */
export declare interface EntitlementInfo {
    /**
     * The entitlement identifier configured in the RevenueCat dashboard.
     */
    readonly identifier: string;
    /**
     * True if the user has access to the entitlement.
     */
    readonly isActive: boolean;
    /**
     * True if the underlying subscription is set to renew at the end of the
     * billing period (expirationDate). Will always be True if entitlement is
     * for lifetime access.
     */
    readonly willRenew: boolean;
    /**
     * The store where this entitlement was unlocked from.
     */
    readonly store: Store;
    /**
     * The latest purchase or renewal date for the entitlement.
     */
    readonly latestPurchaseDate: Date;
    /**
     * The first date this entitlement was purchased.
     */
    readonly originalPurchaseDate: Date;
    /**
     * The expiration date for the entitlement, can be `null` for lifetime
     * access. If the {@link EntitlementInfo.periodType} is `trial`, this is the trial
     * expiration date.
     */
    readonly expirationDate: Date | null;
    /**
     * The product identifier that unlocked this entitlement.
     */
    readonly productIdentifier: string;
    /**
     * The date an unsubscribe was detected. Can be `null`.
     * Note: Entitlement may still be active even if user has unsubscribed.
     * Check the {@link EntitlementInfo.isActive} property.
     */
    readonly unsubscribeDetectedAt: Date | null;
    /**
     * The date a billing issue was detected. Can be `null` if there is
     * no billing issue or an issue has been resolved. Note: Entitlement may
     * still be active even if there is a billing issue.
     * Check the `isActive` property.
     */
    readonly billingIssueDetectedAt: Date | null;
    /**
     * False if this entitlement is unlocked via a production purchase.
     */
    readonly isSandbox: boolean;
    /**
     * The last period type this entitlement was in.
     */
    readonly periodType: PeriodType;
}

/**
 * Contains all the entitlements associated to the user.
 * @public
 */
export declare interface EntitlementInfos {
    /**
     * Map of all {@link EntitlementInfo} objects (active and inactive) keyed by
     * entitlement identifier.
     */
    readonly all: {
        [entitlementId: string]: EntitlementInfo;
    };
    /**
     * Dictionary of active {@link EntitlementInfo} keyed by entitlement identifier.
     */
    readonly active: {
        [entitlementId: string]: EntitlementInfo;
    };
}

/**
 * Error codes for the Purchases SDK.
 * @public
 */
export declare enum ErrorCode {
    UnknownError = 0,
    UserCancelledError = 1,
    StoreProblemError = 2,
    PurchaseNotAllowedError = 3,
    PurchaseInvalidError = 4,
    ProductNotAvailableForPurchaseError = 5,
    ProductAlreadyPurchasedError = 6,
    ReceiptAlreadyInUseError = 7,
    InvalidReceiptError = 8,
    MissingReceiptFileError = 9,
    NetworkError = 10,
    InvalidCredentialsError = 11,
    UnexpectedBackendResponseError = 12,
    InvalidAppUserIdError = 14,
    OperationAlreadyInProgressError = 15,
    UnknownBackendError = 16,
    InvalidAppleSubscriptionKeyError = 17,
    IneligibleError = 18,
    InsufficientPermissionsError = 19,
    PaymentPendingError = 20,
    InvalidSubscriberAttributesError = 21,
    LogOutWithAnonymousUserError = 22,
    ConfigurationError = 23,
    UnsupportedError = 24,
    EmptySubscriberAttributesError = 25,
    CustomerInfoError = 28,
    SignatureVerificationError = 36
}

/**
 * Possible levels to log in the console.
 * @public
 */
export declare enum LogLevel {
    /**
     * No logs will be shown in the console.
     */
    Silent = 0,
    /**
     * Only errors will be shown in the console.
     */
    Error = 1,
    /**
     * Only warnings and errors will be shown in the console.
     */
    Warn = 2,
    /**
     * Only info, warnings, and errors will be shown in the console.
     */
    Info = 3,
    /**
     * Debug, info, warnings, and errors will be shown in the console.
     */
    Debug = 4,
    /**
     * All logs will be shown in the console.
     */
    Verbose = 5
}

/**
 * An offering is a collection of {@link Package} available for the user to purchase.
 * For more info see https://docs.revenuecat.com/docs/entitlements
 * @public
 */
export declare interface Offering {
    /**
     * Unique identifier defined in RevenueCat dashboard.
     */
    readonly identifier: string;
    /**
     * Offering description defined in RevenueCat dashboard.
     */
    readonly serverDescription: string;
    /**
     * Offering metadata defined in RevenueCat dashboard.
     */
    readonly metadata: {
        [key: string]: unknown;
    } | null;
    /**
     * A map of all the packages available for purchase keyed by package ID.
     */
    readonly packagesById: {
        [key: string]: Package;
    };
    /**
     * A list of all the packages available for purchase.
     */
    readonly availablePackages: Package[];
    /**
     * Lifetime package type configured in the RevenueCat dashboard, if available.
     */
    readonly lifetime: Package | null;
    /**
     * Annual package type configured in the RevenueCat dashboard, if available.
     */
    readonly annual: Package | null;
    /**
     * Six month package type configured in the RevenueCat dashboard, if available.
     */
    readonly sixMonth: Package | null;
    /**
     * Three month package type configured in the RevenueCat dashboard, if available.
     */
    readonly threeMonth: Package | null;
    /**
     * Two month package type configured in the RevenueCat dashboard, if available.
     */
    readonly twoMonth: Package | null;
    /**
     * Monthly package type configured in the RevenueCat dashboard, if available.
     */
    readonly monthly: Package | null;
    /**
     * Weekly package type configured in the RevenueCat dashboard, if available.
     */
    readonly weekly: Package | null;
}

/**
 * This class contains all the offerings configured in RevenueCat dashboard.
 * For more info see https://docs.revenuecat.com/docs/entitlements
 * @public
 */
export declare interface Offerings {
    /**
     * Dictionary of all {@link Offering} objects keyed by their identifier.
     */
    readonly all: {
        [offeringId: string]: Offering;
    };
    /**
     * Current offering configured in the RevenueCat dashboard.
     */
    readonly current: Offering | null;
}

/**
 * Contains information about the product available for the user to purchase.
 * For more info see https://docs.revenuecat.com/docs/entitlements
 * @public
 */
export declare interface Package {
    /**
     * Unique identifier for this package. Can be one a predefined package type or a custom one.
     */
    readonly identifier: string;
    /**
     * The {@link Product} assigned to this package.
     */
    readonly rcBillingProduct: Product;
    /**
     * The type of package.
     */
    readonly packageType: PackageType;
}

/**
 * Enumeration of all possible Package types.
 * @public
 */
export declare enum PackageType {
    /**
     * A package that was defined with an unrecognized RC identifier.
     */
    Unknown = "unknown",
    /**
     * A package that was defined with a custom identifier.
     */
    Custom = "custom",
    /**
     * A package configured with the predefined lifetime identifier.
     */
    Lifetime = "$rc_lifetime",
    /**
     * A package configured with the predefined annual identifier.
     */
    Annual = "$rc_annual",
    /**
     * A package configured with the predefined six month identifier.
     */
    SixMonth = "$rc_six_month",
    /**
     * A package configured with the predefined three month identifier.
     */
    ThreeMonth = "$rc_three_month",
    /**
     * A package configured with the predefined two month identifier.
     */
    TwoMonth = "$rc_two_month",
    /**
     * A package configured with the predefined monthly identifier.
     */
    Monthly = "$rc_monthly",
    /**
     * A package configured with the predefined weekly identifier.
     */
    Weekly = "$rc_weekly"
}

/**
 * Supported period types for an entitlement.
 * - "normal" If the entitlement is not under an introductory or trial period.
 * - "intro" If the entitlement is under an introductory period.
 * - "trial" If the entitlement is under a trial period.
 * @public
 */
export declare type PeriodType = "normal" | "intro" | "trial";

/**
 * Price information for a product.
 * @public
 */
export declare interface Price {
    /**
     * Price in full units of the currency.
     */
    readonly amount: number;
    /**
     * Returns ISO 4217 currency code for price.
     * For example, if price is specified in British pounds sterling,
     * currency is "GBP".
     * If currency code cannot be determined, currency symbol is returned.
     */
    readonly currency: string;
    /**
     * Formatted price string including price and currency.
     */
    readonly formattedPrice: string;
}

/**
 * Represents product's listing details.
 * @public
 */
export declare interface Product {
    /**
     * The product ID.
     */
    readonly identifier: string;
    /**
     * Name of the product.
     */
    readonly displayName: string;
    /**
     * Price of the product.
     */
    readonly currentPrice: Price;
    /**
     * The period duration for a subscription product.
     */
    readonly normalPeriodDuration: string | null;
    /**
     * The offering ID used to obtain this product.
     */
    readonly presentedOfferingIdentifier: string;
}

/**
 * Entry point for Purchases SDK. It should be instantiated as soon as your
 * app is started. Only one instance of Purchases should be instantiated
 * at a time!
 * @public
 */
export declare class Purchases {
    /**
     * Set the log level. Logs of the given level and below will be printed
     * in the console.
     * Default is `LogLevel.Silent` so no logs will be printed in the console.
     * @param logLevel - LogLevel to set.
     */
    static setLogLevel(logLevel: LogLevel): void;
    /**
     * Get the singleton instance of Purchases. It's preferred to use the instance
     * obtained from the {@link Purchases.configure} method when possible.
     * @throws {@link UninitializedPurchasesError} if the instance has not been initialized yet.
         */
     static getSharedInstance(): Purchases;
     /**
      * Returns whether the Purchases SDK is configured or not.
      */
     static isConfigured(): boolean;
     /**
      * Configures the Purchases SDK. This should be called as soon as your app
      * has a unique user id for your user. You should only call this once, and
      * keep the returned instance around for use throughout your application.
      * @param apiKey - RevenueCat API Key. Can be obtained from the RevenueCat dashboard.
      * @param appUserId - Your unique id for identifying the user.
      * @throws {@link PurchasesError} if the API key or user id are invalid.
          */
      static configure(apiKey: string, appUserId: string): Purchases;
      /**
       * Fetch the configured offerings for this user. You can configure these
       * in the RevenueCat dashboard.
       */
      getOfferings(): Promise<Offerings>;
      /**
       * Convenience method to check whether a user is entitled to a specific
       * entitlement. This will use {@link Purchases.getCustomerInfo} under the hood.
       * @param entitlementIdentifier - The entitlement identifier you want to check.
       * @returns Whether the user is entitled to the specified entitlement
       * @throws {@link PurchasesError} if there is an error while fetching the customer info.
           * @see {@link Purchases.getCustomerInfo}
           */
       isEntitledTo(entitlementIdentifier: string): Promise<boolean>;
       /**
        * Method to perform a purchase for a given package. You can obtain the
        * package from {@link Purchases.getOfferings}. This method will present the purchase
        * form on your site, using the given HTML element as the mount point, if
        * provided, or as a modal if not.
        * @param rcPackage - The package you want to purchase. Obtained from {@link Purchases.getOfferings}.
        * @param customerEmail - The email of the user. If null, RevenueCat will ask the customer for their email.
        * @param htmlTarget - The HTML element where the billing view should be added. If null, a new div will be created at the root of the page and appended to the body.
        * @returns The customer info after the purchase is completed successfuly.
        * @throws {@link PurchasesError} if there is an error while performing the purchase. If the {@link PurchasesError.errorCode} is {@link ErrorCode.UserCancelledError}, the user cancelled the purchase.
            */
        purchasePackage(rcPackage: Package, customerEmail?: string, htmlTarget?: HTMLElement): Promise<{
            customerInfo: CustomerInfo;
        }>;
        /**
         * Gets latest available {@link CustomerInfo}.
         * @returns The latest {@link CustomerInfo}.
         * @throws {@link PurchasesError} if there is an error while fetching the customer info.
             */
         getCustomerInfo(): Promise<CustomerInfo>;
         /**
          * Gets the current app user id.
          */
         getAppUserId(): string;
         /**
          * Change the current app user id. Returns the customer info for the new
          * user id.
          * @param newAppUserId - The user id to change to.
          */
         changeUser(newAppUserId: string): Promise<CustomerInfo>;
         /**
          * @returns Whether the SDK is using a sandbox API Key.
          */
         isSandbox(): boolean;
         /**
          * Closes the Purchases instance. You should never have to do this normally.
          */
         close(): void;
        }

        /**
         * Error class for Purchases SDK. You should handle these errors and react
         * accordingly in your app.
         * @public
         */
        export declare class PurchasesError extends Error {
            /**
             * Error code for the error. This is useful to appropriately react to
             * different error situations.
             */
            readonly errorCode: ErrorCode;
            /**
             * Underlying error message. This provides more details on the error and
             * can be useful for debugging and logging.
             */
            readonly underlyingErrorMessage?: string | null | undefined;
            constructor(
            /**
             * Error code for the error. This is useful to appropriately react to
             * different error situations.
             */
            errorCode: ErrorCode, 
            /**
             * Message for the error. This is useful for debugging and logging.
             */
            message?: string, 
            /**
             * Underlying error message. This provides more details on the error and
             * can be useful for debugging and logging.
             */
            underlyingErrorMessage?: string | null | undefined);
            toString: () => string;
        }

        /**
         * The store where the user originally subscribed.
         * @public
         */
        export declare type Store = "app_store" | "mac_app_store" | "play_store" | "amazon" | "stripe" | "rc_billing" | "promotional" | "unknown";

        /**
         * Error indicating that the SDK was accessed before it was initialized.
         * @public
         */
        export declare class UninitializedPurchasesError extends Error {
            constructor();
        }

        export { }
